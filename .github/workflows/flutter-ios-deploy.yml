name: iOS Build & Upload to App Store

on:
  push:
    branches:
      - main   # Change to your release branch
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14  # macOS runner with latest Xcode + Flutter

    steps:
      # 1. Checkout repo
      - uses: actions/checkout@v3

      # 2. Setup Flutter
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"   # Match your Flutter SDK version
          channel: stable

      # 3. Install dependencies
      - run: flutter pub get

      # 4. Setup keychain & certificates
      - name: Setup signing certificates
        env:
          IOS_DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
        run: |
          CERT_PATH=$RUNNER_TEMP/dist_cert.p12
          echo "$IOS_DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode > $CERT_PATH
          security create-keychain -p "" build.keychain
          security import $CERT_PATH -k ~/Library/Keychains/build.keychain -P "$IOS_DISTRIBUTION_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security list-keychain -s ~/Library/Keychains/build.keychain
          security default-keychain -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/build.keychain

      # 5. Install provisioning profile
      - name: Install provisioning profile
        env:
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode > $PROFILE_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i $PROFILE_PATH))
          cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      # 6. Build Flutter iOS (no codesign yet)
      - run: flutter build ios --release --no-codesign

      # 7. Archive with Xcode
      - name: Archive app
        run: |
          cd ios
          xcodebuild clean archive \
            -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            DEVELOPMENT_TEAM=${{ secrets.TEAM_ID }} \
            PROVISIONING_PROFILE_SPECIFIER="ilolo_AppStore" \
            IPHONEOS_DEPLOYMENT_TARGET=13.0 \
            -allowProvisioningUpdates

      # 8. Export IPA
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportPath $RUNNER_TEMP/export \
            -exportOptionsPlist ios/exportOptions.plist \
            -allowProvisioningUpdates
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

      # 9. Upload to App Store Connect
      - name: Upload IPA to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ runner.temp }}/export/Runner.ipa
          issuer-id: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

      # 10. Save IPA as GitHub artifact (optional but recommended)
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-app
          path: ${{ runner.temp }}/export/Runner.ipa
